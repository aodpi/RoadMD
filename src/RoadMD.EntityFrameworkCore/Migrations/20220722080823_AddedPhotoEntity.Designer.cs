// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoadMD.EntityFrameworkCore;

#nullable disable

namespace RoadMD.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220722080823_AddedPhotoEntity")]
    partial class AddedPhotoEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RoadMD.Domain.Entities.Infraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("Infractions");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.InfractionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InfractionCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a4a7870-e95c-4443-883d-d2126a5efa04"),
                            Name = "Conducerea unui vehicul fără număr de înmatriculare"
                        },
                        new
                        {
                            Id = new Guid("4940a717-eca6-4a9e-9374-a34a5f46e279"),
                            Name = "Amplasarea ilegală pe vehicul a unui număr de înmatriculare fals"
                        },
                        new
                        {
                            Id = new Guid("fbe7c0c8-fcda-4314-860d-d3e1f2c29cd7"),
                            Name = "Depăşirea vitezei de circulaţie stabilită"
                        },
                        new
                        {
                            Id = new Guid("796b8081-bb01-45f2-a76e-0d7a03250914"),
                            Name = "Oprirea în locuri interzise"
                        },
                        new
                        {
                            Id = new Guid("d7d5ac06-54b1-49a3-9d1f-539e5a48ccd9"),
                            Name = "Staţionarea sau parcarea în locuri interzise"
                        });
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InfractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlobName")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InfractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("BlobName")
                        .IsUnique();

                    b.HasIndex("InfractionId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.ReportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReportCategories");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LetterCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("NumberCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Infraction", b =>
                {
                    b.HasOne("RoadMD.Domain.Entities.InfractionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMD.Domain.Entities.Location", "Location")
                        .WithOne("Infraction")
                        .HasForeignKey("RoadMD.Domain.Entities.Infraction", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMD.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Infractions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Photo", b =>
                {
                    b.HasOne("RoadMD.Domain.Entities.Infraction", "Infraction")
                        .WithMany("Photos")
                        .HasForeignKey("InfractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Infraction");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Infraction", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Location", b =>
                {
                    b.Navigation("Infraction")
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMD.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Infractions");
                });
#pragma warning restore 612, 618
        }
    }
}
